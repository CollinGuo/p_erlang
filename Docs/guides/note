Operators Associativity
: #
(unary) +, (unary) -, bnot, not
/, *, div, rem, band, and Left associative
+, -, bor, bxor, bsl, bsr, or, xor Left associative
++, - - Right associative
==, /=, =<, <, >=, >, =:=, =/=
andalso
orelse
= ! Right associative
catch
Table 5¡ªOperator precedence


Predicate Meaning
is_atom(X) X is an atom.
is_binary(X) X is a binary.
is_constant(X) X is a constant.
is_float(X) X is a float.
is_function(X) X is a fun.
is_function(X, N) X is a fun with N arguments.
is_integer(X) X is an integer.
is_list(X) X is a list.
is_map(X) X is a map.
is_number(X) X is an integer or a float.
is_pid(X) X is a process identifier.
is_pmod(X) X is an instance of a parameterized module.
is_port(X) X is a port.
is_reference(X) X is a reference.
is_tuple(X) X is a tuple.
is_record(X,Tag) X is a record of type Tag.
is_record(X,Tag,N) X is a record of type Tag and size N.
Table 1¡ªGuard predicates

Operator Meaning
X > Y X is greater than Y.
X < Y X is less than Y.
X =< Y X is equal to or less than Y.
X >= Y X is greater than or equal to Y.
X == Y X is equal to Y.
X /= Y X is not equal to Y.
X =:= Y X is identical to Y.
X =/= Y X is not identical to Y.
Table 6¡ªTerm comparisons

Op Description Arg. Type Priority
+ X + X Number 1
- X - X Number 1
X * Y X * Y Number 2
X / Y X / Y (floating-point division) Number 2
bnot X Bitwise not of X Integer 2
X div Y Integer division of X and Y Integer 2
X rem Y Integer remainder of X divided by Y Integer 2
X band Y Bitwise and of X and Y Integer 2
X + Y X + Y Number 3
X - Y X - Y Number 3
X bor Y Bitwise or of X and Y Integer 3
X bxor Y Bitwise xor of X and Y Integer 3
X bsl N Arithmetic bitshift left of X by N bits Integer 3
X bsr N Arithmetic bitshift right of X by N bits Integer 3
Table 3¡ªArithmetic expressions

There are four possible boolean expressions.
? not B1: Logical not
? B1 and B2: Logical and
? B1 or B2: Logical or
? B1 xor B2: Logical xor

Expr1 orelse Expr2
This first evaluates Expr1. If Expr1 evaluates to true, Expr2 is not evaluated.
If Expr1 evaluates to false, Expr2 is evaluated.
Expr1 andalso Expr2
This first evaluates Expr1. If Expr1 evaluates to true, Expr2 is evaluated. If
Expr1 evaluates to false, Expr2 is not evaluated.
Note: In the corresponding boolean expressions (A or B; A and B), both the
arguments are always evaluated, even if the truth value of the expression can
be determined by evaluating only the first expression.

Many of the changes have been proposed such that the user doesn't need to think very hard about them. One that is unavoidable, however, is sorting. Previously in the book, the sorting order was defined as:

number < atom < reference < fun < port < pid < tuple < list < bit string
Maps now fit in here:

number < atom < reference < fun < port < pid < tuple < map < list < bit string

The mapping between JSON objects and Erlang values is as follows:
    JSON numbers are represented as Erlang integers or floats.
    JSON strings are represented as Erlang binaries.
    JSON lists are represented as Erlang lists.
    JSON true and false are represented as Erlang atoms true and false.
    JSON objects are represented as Erlang maps, with the restriction that
the keys in the map must be atoms, strings, or binaries, and the values
must be representable as JSON terms.

For the purposes of comparison, a total ordering is defined over all terms.
This is defined so that the following is true:

number < atom < reference < fun < port < pid < tuple (and record) < map < list < binary

This means that, for example, a number (any number) is defined to be
smaller than an atom (any atom), that a tuple is greater than an atom, and
so on. (Note that for the purposes of ordering, ports and PIDs are included
in this list. We¡¯ll talk about these later.)

<<>>
<<E1, E2, ..., En>>
Each element Ei specifies a single segment of the binary or bitstring. Each
element Ei can have one of four possible forms.
Ei = Value |
Value:Size |
Value/TypeSpecifierList |
Value:Size/TypeSpecifierList

1> B = <<16#5f>>.
<<"_">>
2> [ X || <<X:1>> <= B].
[0,1,0,1,1,1,1,1]
3> << <<X>> || <<X:1>> <= B >>.
<<0,1,0,1,1,1,1,1>>

End is big | little | native
    This specifies the endianess of the machine. native is determined at runtime, depending upon the CPU of your machine. The default is big, which
    is also known as network byte order. The only significance of this has to
    do with packing and unpacking integers and floats from binaries. When
    packing and unpacking integers from binaries on different endian
    machines, you should take care to use the correct endianess.
    When writing bit syntax expressions, some experimentation may be necessary. To assure yourself that you are doing the right thing, try the
    following shell command:
    1> {<<16#12345678:32/big>>,<<16#12345678:32/little>>,
    <<16#12345678:32/native>>,<<16#12345678:32>>}.
    {<<18,52,86,120>>,<<120,86,52,18>>,
    <<120,86,52,18>>,<<18,52,86,120>>}
    The output shows you exactly how integers are packed in a binary using
    the bit syntax.
    In case you¡¯re worried, term_to_binary and binary_to_term ¡°do the right thing¡±
    when packing and unpacking integers. So, you can, for example, create
    a tuple containing integers on a big-endian machine. Then use
    term_to_binary to convert the term to a binary and send this to a little-endian
    machine. On the little-endian, you do binary_to_term, and all the integers in
    the tuple will have the correct values.
Sign is signed | unsigned
    This parameter is used only in pattern matching. The default is unsigned.
   Type is integer | float | binary | bytes | bitstring | bits | utf8 | utf16 | utf32
    The default is integer.
Unit is written unit:1 | 2 | ¡­ 256
    The default value of Unit is 1 for integer, float, and bitstring and is 8 for binary.
    No value is required for types utf8, utf16, and utf32.
    The total size of the segment is Size x Unit bits long. A segment of type
    binary must have a size that is evenly divisible by 8.

Op Description Arg. Type Priority
+ X + X Number 1
- X - X Number 1
X * Y X * Y Number 2
X / Y X / Y (floating-point division) Number 2
bnot X Bitwise not of X Integer 2
X div Y Integer division of X and Y Integer 2
X rem Y Integer remainder of X divided by Y Integer 2
X band Y Bitwise and of X and Y Integer 2
X + Y X + Y Number 3
X - Y X - Y Number 3
X bor Y Bitwise or of X and Y Integer 3
X bxor Y Bitwise xor of X and Y Integer 3
X bsl N Arithmetic bitshift left of X by N bits Integer 3
X bsr N Arithmetic bitshift right of X by N bits Integer 3

There are four possible boolean expressions.
? not B1: Logical not
? B1 and B2: Logical and
? B1 or B2: Logical or
? B1 xor B2: Logical xor

sleep() ->
receive
after 3000 -> true
end.

Escape Sequence Meaning Integer Code
\b Backspace 8
\d Delete 127
\e Escape 27
\f Form feed 12
\n New line 10
\r Carriage return 13
\s Space 32
\t Tab 9
\v Vertical tab 11
Hexadecimal characters (... are hexadecimal
characters)
\x{...}
\^a..\^z or \^A..\^Z Ctrl+A to Ctrl+Z 1 to 26
\' Single quote 39
\" Double quote 34
\\ Backslash 92
\C The ASCII code for C (C is a character) (An integer)
Table 4¡ªEscape sequences

Erlang Has Crashed and You Want to Read the Crash Dump
If Erlang crashes, it leaves behind a file called erl_crash.dump. The contents of
this file might give you a clue as to what has gone wrong. To analyze the crash
dump, there is a web-based crash analyzer. To start the analyzer, give the
following command:
1> crashdump_viewer:start().
WebTool is available at http://localhost:8888/
Or http://127.0.0.1:8888/
ok
Then point your browser at http://localhost:8888/. You can then happily surf the
error log.

Pid ! M is defined to be M. Because of this, Pid1 ! Pid2 ! ¡­ ! Msg means send the
message Msg to all the processes Pid1, Pid2, and so on.

The system limit is set to 262,144 processes; to exceed this limit, you have
to start the Erlang emulator with the +P flag as follows:
$ erl +P 3000000
1> processes:max(500000).

-spec spawn_link(Fun) -> Pid
-spec spawn_link(Mod, Fnc, Args) -> Pid
    This behaves like spawn(Fun) or spawn(Mod,Func,Args) and also creates a link
    between the parent and child processes.
-spec spawn_monitor(Fun) -> {Pid, Ref}
-spec spawn_monitor(Mod, Func, Args) -> {Pid, Ref}
    This is like spawn_link, but it creates a monitor rather than a link. Pid is the
    process identifier of the newly created process, and Ref is a reference to
    the process. If the process dies with the reason Why, then the message
    {'DOWN',Ref,process,Pid,Why} will be sent to the parent process.
-spec process_flag(trap_exit, true)
    This turns the current process into a system process. A system process
    is a process that can receive and process error signals.
-spec link(Pid) -> true
    This creates a link to the process Pid. Links are symmetric. If a process A
    evaluates link(B), then it will be linked to B. The net effect is the same as
    if B had evaluated link(A).
    If the process Pid does not exist, then an exit noproc exception is raised.
    If A is already linked to B and evaluates link(B) (or vice versa), the call is
    ignored.
-spec unlink(Pid) -> true
    This removes any link between the current process and the process Pid.
-spec erlang:monitor(process, Item) -> Ref
    This sets up a monitor. Item is a Pid or a registered name of a process.
-spec demonitor(Ref) -> true
    This removes a monitor with reference Ref.
    Chapter 13. Errors in Concurrent Programs ? 206
    report erratum ? discuss
-spec exit(Why) -> none()
    This causes the current process to terminate with the reason Why. If the
    clause that executes this statement is not within the scope of a catch
    statement, then the current process will broadcast an exit signal, with
    argument Why to all processes to which it is currently linked. It will also
    broadcast a DOWN message to all processes that are monitoring it.
-spec exit(Pid, Why) -> true
    This sends an exit signal with the reason Why to the process Pid. The process executing this BIF does not itself die. This can be used to ¡°fake¡± exit
    signals.

Use the shell command nl(Mod). This loads the module Mod on all connected nodes.

1. Make sure that port 4369 is open for both TCP and UDP traffic. This port
    is used by a program called epmd (short for the Erlang Port Mapper
    Daemon).
2. Choose a port or range of ports to be used for distributed Erlang, and
    make sure these ports are open. If these ports are Min and Max (use Min =
    Max if you want to use only one port), then start Erlang with the following
    command:
    $ erl -name ... -setcookie ... -kernel inet_dist_listen_min Min \
    inet_dist_listen_max Max

8.3  Predefined Macros

The following macros are predefined:

?MODULE
    The name of the current module.
?MODULE_STRING.
    The name of the current module, as a string.
?FILE.
    The file name of the current module.
?LINE.
    The current line number.
?MACHINE.
    The machine name, 'BEAM'.

erl_docgen -> doc -> pdf

Format Result
====== ======
io:format("|~10s|",["abc"]) | abc|
io:format("|~-10s|",["abc"]) |abc |
io:format("|~10.3.+s|",["abc"]) |+++++++abc|
io:format("|~-10.10.+s|",["abc"]) |abc+++++++|
io:format("|~10.7.+s|",["abc"]) |+++abc++++|

1> {ok, S} = file:open("test2.dat", write).
{ok,<0.62.0>}
2> io:format(S, "~s~n", ["Hello readers"]).
ok
3> io:format(S, "~w~n", [123]).
ok
4> io:format(S, "~s~n", ["that's it"]).
ok
5> file:close(S).